// 19_pointer.cpp

/*
	포인터 : 특정 개체가 차지하는 메모리 공간의 시작주소를 저장하는 변수, 주소를 가리킨다는 의미에서의 포인터이다.
	 - 포인터는 특정 개체의 시작 주소만을 가리키기 문에 특정 개체의 총 크기는 알 수 없다.
	 - 선언과 동시에 초기화 하는것을 권장한다. 초기화 되지 않은 상태로 사용시 의도하지않은 메모리를 사용하거나 변경할 수 있기 문이다.
	 - 포인터의 크기는 운영 체제에 따라 다르다
	  => 32bit 운영체제 : 4byte
	  => 64bit 운영체제 : 8byte
	  => 32bit와 64bit는 cpu가 데이터를 처리하는데 사용하는 임시 레지스터의 크기를 의미한다.
	  레지스터는 CPU가 명령을 처리하는 데이터의 임시 저장공간임. 
	  따라서 CPU가 한번에 처리할 수 있는 데이터량은 레지스터의 크기를 따라갈 수 밖에 없음. 
	  32bit 운영체제면 4바이트 주소를 처리하는데 한계이고 
	  64bit 운영체제라면 8바이트 크기의 메모리 주소를 처리하는게 한계임.

*/
#include <stdio.h>
#include <string.h>

void pointer();

int main() {
	pointer();

	return 0;
}

void pointer()
{
	/*
		선언
		자료형* 변수명

		& 연산자  (참조 연산자)  : 데이터의 공간 주소값을 알아오는 연산자
		* 연산자 (역참조 연산자) : 주소값의 데이터 공간에 접근하는 연산자
		
		주소는 16진수로 표현이 되는데 16진수 2자리마다 1바이트를 의미한다.
		2진수 4자리(4bit) == 16진수 1자리(4bit)
		16진수 2자리(8bit) == 1byte

		%p : 주소(포인터)를 출력할 때 사용하는 형식 지정자
	*/

	int i = 0;
	int* ip1 = &i;

	printf("i의 주소 0x%p \n", &i);
	printf("ip1의 값 0x%p \n", ip1);

	printf("i의 값\t\t %d \n", i);
	printf("ip1의 역참조\t %d\n",*ip1);

	// 32bit, 8bit 차이에 따라 크기가 바뀐다.
	printf("포인터 ip1의 크기 : %d \n\n", sizeof(ip1));
}
